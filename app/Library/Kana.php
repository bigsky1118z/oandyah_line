<?php

namespace App\Library;

use Illuminate\Support\Facades\Facade;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\HttpFoundation\StreamedResponse;

class Kana extends Facade
{
    public static function katakana_to_hiragana($text)
    {
        $map = [
            "ア" => "あ", "イ" => "い", "ウ" => "う", "エ" => "え", "オ" => "お",
            "カ" => "か", "キ" => "き", "ク" => "く", "ケ" => "け", "コ" => "こ",
            "サ" => "さ", "シ" => "し", "ス" => "す", "セ" => "せ", "ソ" => "そ",
            "タ" => "た", "チ" => "ち", "ツ" => "つ", "テ" => "て", "ト" => "と",
            "ナ" => "な", "ニ" => "に", "ヌ" => "ぬ", "ネ" => "ね", "ノ" => "の",
            "ハ" => "は", "ヒ" => "ひ", "フ" => "ふ", "ヘ" => "へ", "ホ" => "ほ",
            "マ" => "ま", "ミ" => "み", "ム" => "む", "メ" => "め", "モ" => "も",
            "ヤ" => "や", "ユ" => "ゆ", "ヨ" => "よ",
            "ラ" => "ら", "リ" => "り", "ル" => "る", "レ" => "れ", "ロ" => "ろ",
            "ワ" => "わ", "ヲ" => "を", "ン" => "ん",
            "ガ" => "が", "ギ" => "ぎ", "グ" => "ぐ", "ゲ" => "げ", "ゴ" => "ご",
            "ザ" => "ざ", "ジ" => "じ", "ズ" => "ず", "ゼ" => "ぜ", "ゾ" => "ぞ",
            "ダ" => "だ", "ヂ" => "ぢ", "ヅ" => "づ", "デ" => "で", "ド" => "ど",
            "バ" => "ば", "ビ" => "び", "ブ" => "ぶ", "ベ" => "べ", "ボ" => "ぼ",
            "パ" => "ぱ", "ピ" => "ぴ", "プ" => "ぷ", "ペ" => "ぺ", "ポ" => "ぽ",
            "ァ" => "ぁ", "ィ" => "ぃ", "ゥ" => "ぅ", "ェ" => "ぇ", "ォ" => "ぉ",
            "ャ" => "ゃ", "ュ" => "ゅ", "ョ" => "ょ", "ッ" => "っ", "ー" => "ー",
        ];
    
        $result = "";
        $len = mb_strlen($text);
        for ($i = 0; $i < $len; $i++) {
            $char = mb_substr($text, $i, 1);
            $result .= isset($map[$char]) ? $map[$char] : $char;
        }
        return $result;
    }

    public static function hiragana_to_katakana($text)
    {
        $map = [
            "あ" => "ア", "い" => "イ", "う" => "ウ", "え" => "エ", "お" => "オ",
            "か" => "カ", "き" => "キ", "く" => "ク", "け" => "ケ", "こ" => "コ",
            "さ" => "サ", "し" => "シ", "す" => "ス", "せ" => "セ", "そ" => "ソ",
            "た" => "タ", "ち" => "チ", "つ" => "ツ", "て" => "テ", "と" => "ト",
            "な" => "ナ", "に" => "ニ", "ぬ" => "ヌ", "ね" => "ネ", "の" => "ノ",
            "は" => "ハ", "ひ" => "ヒ", "ふ" => "フ", "へ" => "ヘ", "ほ" => "ホ",
            "ま" => "マ", "み" => "ミ", "む" => "ム", "め" => "メ", "も" => "モ",
            "や" => "ヤ", "ゆ" => "ユ", "よ" => "ヨ",
            "ら" => "ラ", "り" => "リ", "る" => "ル", "れ" => "レ", "ろ" => "ロ",
            "わ" => "ワ", "を" => "ヲ", "ん" => "ン",
            "が" => "ガ", "ぎ" => "ギ", "ぐ" => "グ", "げ" => "ゲ", "ご" => "ゴ",
            "ざ" => "ザ", "じ" => "ジ", "ず" => "ズ", "ぜ" => "ゼ", "ぞ" => "ゾ",
            "だ" => "ダ", "ぢ" => "ヂ", "づ" => "ヅ", "で" => "デ", "ど" => "ド",
            "ば" => "バ", "び" => "ビ", "ぶ" => "ブ", "べ" => "ベ", "ぼ" => "ボ",
            "ぱ" => "パ", "ぴ" => "ピ", "ぷ" => "プ", "ぺ" => "ペ", "ぽ" => "ポ",
            "ぁ" => "ァ", "ぃ" => "ィ", "ぅ" => "ゥ", "ぇ" => "ェ", "ぉ" => "ォ",
            "ゃ" => "ャ", "ゅ" => "ュ", "ょ" => "ョ", "っ" => "ッ", "ー" => "ー",
        ];
    
        $result = "";
        $len = mb_strlen($text);
        for ($i = 0; $i < $len; $i++) {
            $char = mb_substr($text, $i, 1);
            $result .= isset($map[$char]) ? $map[$char] : $char;
        }
        return $result;
    }


    // 未完成
    public static function kana_to_roma($text)
    {
        $map = [
            "キャ" => "kya", "キュ" => "kyu", "キョ" => "kyo",
            "シャ" => "sha", "シュ" => "shu", "ショ" => "sho",
            "チャ" => "cha", "チュ" => "chu", "チョ" => "cho",
            "ニャ" => "nya", "ニュ" => "nyu", "ニョ" => "nyo",
            "ヒャ" => "hya", "ヒュ" => "hyu", "ヒョ" => "hyo",
            "ミャ" => "mya", "ミュ" => "myu", "ミョ" => "myo",
            "リャ" => "rya", "リュ" => "ryu", "リョ" => "ryo",
            "ギャ" => "gya", "ギュ" => "gyu", "ギョ" => "gyo",
            "ジャ" => "ja", "ジュ" => "ju", "ジョ" => "jo",
            "ビャ" => "bya", "ビュ" => "byu", "ビョ" => "byo",
            "ピャ" => "pya", "ピュ" => "pyu", "ピョ" => "pyo",
            "ア" => "a", "イ" => "i", "ウ" => "u", "エ" => "e", "オ" => "o",
            "カ" => "ka", "キ" => "ki", "ク" => "ku", "ケ" => "ke", "コ" => "ko",
            "サ" => "sa", "シ" => "shi", "ス" => "su", "セ" => "se", "ソ" => "so",
            "タ" => "ta", "チ" => "chi", "ツ" => "tsu", "テ" => "te", "ト" => "to",
            "ナ" => "na", "ニ" => "ni", "ヌ" => "nu", "ネ" => "ne", "ノ" => "no",
            "ハ" => "ha", "ヒ" => "hi", "フ" => "fu", "ヘ" => "he", "ホ" => "ho",
            "マ" => "ma", "ミ" => "mi", "ム" => "mu", "メ" => "me", "モ" => "mo",
            "ヤ" => "ya", "ユ" => "yu", "ヨ" => "yo",
            "ラ" => "ra", "リ" => "ri", "ル" => "ru", "レ" => "re", "ロ" => "ro",
            "ワ" => "wa", "ヲ" => "wo", "ン" => "n",
            "ガ" => "ga", "ギ" => "gi", "グ" => "gu", "ゲ" => "ge", "ゴ" => "go",
            "ザ" => "za", "ジ" => "ji", "ズ" => "zu", "ゼ" => "ze", "ゾ" => "zo",
            "ダ" => "da", "ヂ" => "ji", "ヅ" => "zu", "デ" => "de", "ド" => "do",
            "バ" => "ba", "ビ" => "bi", "ブ" => "bu", "ベ" => "be", "ボ" => "bo",
            "パ" => "pa", "ピ" => "pi", "プ" => "pu", "ペ" => "pe", "ポ" => "po",
            "ッ" => "tsu",
        ];
        $result = "";
        $len = mb_strlen($text);
        for ($i = 0; $i < $len; $i++) {
            $char = mb_substr($text, $i, 1);
            
            // Check for "ッ" (small tsu) which indicates a double consonant
            if ($char === "ッ") {
                if ($i + 1 < $len) {
                    $nextChar = mb_substr($text, $i + 1, 1);
                    $nextRomaji = isset($map[$nextChar]) ? $map[$nextChar] : "";
                    if ($nextRomaji !== "") {
                        $result .= mb_substr($nextRomaji, 0, 1);  // Add the consonant
                    }
                }
                continue;
            }
            $result .= isset($map[$char]) ? $map[$char] : $char;
        }
    }
}